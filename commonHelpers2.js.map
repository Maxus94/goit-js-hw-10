{"version":3,"file":"commonHelpers2.js","sources":["../src/js/2-snackbar.js"],"sourcesContent":["const form = document.querySelector('.form');\nform.addEventListener(\"submit\", submitHandler);\nfunction submitHandler(evt){\n    evt.preventDefault();\n    console.log(form.elements);\n    const promise = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          if (isSuccess) {\n            resolve(\"Success! Value passed to resolve function\");\n          } else {\n            reject(\"Error! Error passed to reject function\");\n          }\n        }, 2000);\n      });\n}\n\n\nfunction createPromiseClickHandler(evt) {\n    evt.preventDefault();\n    iziToast.destroy();  \n    for (let i = 1; i <= Number(numberOfDelaysField.value); i++) {\n      createPromise(\n        i,\n        Number(firstDelayField.value) + Number(stepOfDelayField.value) * (i - 1)\n      )\n        .then(({ position, delay }) => {\n          //console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          iziToast.show({\n            message: `✅ Fulfilled promise ${position} in ${delay}ms`,\n            close: true,\n            backgroundColor: 'green',\n            messageColor: 'white',\n            messageSize: 20,\n            //timeout: 0,\n            position: 'topRight', // bottomRight, bottomLeft, topRight, topLeft, topCenter, bottomCenter, center\n          });\n        })\n        .catch(({ position, delay }) => {\n          //console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n          iziToast.show({\n            message: `❌ Rejected promise ${position} in ${delay}ms`,\n            close: true,\n            backgroundColor: 'red',\n            messageColor: 'white',\n            messageSize: 20,\n            //timeout: 0,\n            position: 'topRight', // bottomRight, bottomLeft, topRight, topLeft, topCenter, bottomCenter, center\n          });\n        });\n    }\n    form.reset();\n  }\n  \n  function createPromise(delay) {\n    return new Promise((resolve, reject) => {\n      console.log();\n        setTimeout(() => {\n        if (shouldResolve) {\n          resolve(delay);\n        } else {\n          reject(delay);\n        }\n      }, delay);\n    });\n  }"],"names":["form","submitHandler","evt","resolve","reject"],"mappings":"oDAAA,MAAMA,EAAO,SAAS,cAAc,OAAO,EAC3CA,EAAK,iBAAiB,SAAUC,CAAa,EAC7C,SAASA,EAAcC,EAAI,CACvBA,EAAI,eAAc,EAClB,QAAQ,IAAIF,EAAK,QAAQ,EACT,IAAI,QAAQ,CAACG,EAASC,IAAW,CAC7C,WAAW,IAAM,CACX,UACFD,EAAQ,2CAA2C,EAEnDC,EAAO,wCAAwC,CAElD,EAAE,GAAI,CACf,CAAO,CACP"}